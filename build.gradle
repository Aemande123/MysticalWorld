buildscript {
    repositories {
        mavenLocal()
        maven { url = 'http://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            url 'https://dogforce-games.com/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.165-run-configs-rework', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
//if (System.getenv('BUILD_NUMBER') != null) {
//    version = "${minecraft_version}-${mod_version}-" + System.getenv('BUILD_NUMBER')
//}
group = 'epicsquid.mysticalworld' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mysticalworld'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mysticalworld {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mysticalworld {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mysticalworld', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0], '--existing', sourceSets.main.resources.srcDirs[1]      

            mods {
                mysticalworld {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://maven.mcmoddev.com'
    }
    maven {
        name = "Jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url "http://maven.tterrag.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "JER"
        url = "https://dl.bintray.com/way2muchnoise/dev"
    }
    flatDir {
        dir 'libs'
    }
    flatDir {
        dir "../libs"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project(':MysticalLib') != null) {
        compile project(':MysticalLib')
    } else {
        compile fg.deobf(project.dependencies.create("epicsquid.mysticallib:mysticallib:${mysticallib_version}-${mysticallib_build}") {
            transitive = false
        })
    }

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "mysticalworld",
                "Specification-Vendor"    : "mysticmodding",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "mysticmodding",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    from(sourceSets.main.output)
    include 'epicsquid/mysticalworld/api/**'

    classifier = 'api'
}

build.dependsOn apiJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            artifact apiJar {
            }

            pom.withXml {
                asNode().dependencies.dependency.each {
                    dep -> dep.parent().remove(dep)
                }
            }
        }
    }
    repositories {
        maven {
            url "file:///" + System.getenv("local_maven")
        }
    }
}
